import { userConfig, dataPath } from "./model.js";
import { getTotalPage } from "./model.js";
import { reloadWindowPageNum, sortPropertyClickEventListener } from "./controller.js"

const { remote } = require('electron');
const { BrowserWindow, dialog } = remote;
const path = require('path');
const itemsOneRow = 5
const maxPageBtn = 9  //need to be odd number

genTagCheckBox();
// checkSearchOptionStatus();
checkOrderAsc();
checkSearchText();
genSortPropMenu();
// genCustomSearchButton();
genContent();
genPageLink();

//generate card(contain one item)
//only item has property imagePath will use the image in that path, or it'll use default path
function cardFactory(item) {
    let cardElement = document.createElement("div");
    let cardBody = document.createElement("div");
    let imagePath = "";

    cardElement.classList.add("card", "col-xs-6", "col-sm-2", "col-md-2");
    cardBody.classList.add("card-body");

    //check if item has path for image
    if (item.hasOwnProperty("imagePath")) {
        imagePath = item["imagePath"];
    }
    else {
        if (item.hasOwnProperty("id")) {
            imagePath = genDefaultImagePath(item["id"]);
        }
    }
    cardElement.innerHTML = '<img class="card-img-top" src="' + imagePath + '" alt="no image"></img>'

    //item visible property list
    let ulListElement = document.createElement("ul");
    ulListElement.classList.add("list-group", "list-group-flush");

    for (let key in userConfig.propVisibility) {
        let listItem = document.createElement("li");
        listItem.classList.add("list-group-item");
        if (userConfig.propVisibility[key]) {
            listItem.innerText = `${key}:${item[key]}`;
            ulListElement.appendChild(listItem);
        }
        else if (item.hasOwnProperty(key)) {
            listItem.innerText = `${key}:${item[key]}`;
            ulListElement.appendChild(listItem);
        }

    }
    cardBody.appendChild(ulListElement);
    cardElement.appendChild(cardBody);
    return cardElement;
}

/*
get image if there is no path property in item then image path will be
generated by this function. Default path is ${folder path same as data.json}/img/N/ID.jpg 
Folder N containes the image from (ID==N*100) to (ID==(N+1)*100)
*/
function genDefaultImagePath(id) {
    return path.dirname(dataPath) + "/img/" + (Math.ceil(id / 100) - 1) + "/" + id + ".jpg";
}

//generator the items in container 3 rows 5 col
function genContent() {
    let itemcounter = 0;
    let currentRowElement = null;
    let currentPageItemList = JSON.parse(sessionStorage.getItem("currentPageItemList"));
    let firstColMargin = document.createElement("div");
    firstColMargin.classList.add("col-xs-0", "col-sm-1", "col-md-1");

    for (let item of currentPageItemList) {
        if (itemcounter % itemsOneRow == 0) {
            if (currentRowElement != null) {
                document.getElementById("item-container").appendChild(currentRowElement);
            }
            currentRowElement = document.createElement("div");
            currentRowElement.classList.add("row");
            currentRowElement.appendChild(firstColMargin.cloneNode(true));
        }
        currentRowElement.appendChild(cardFactory(item));
        itemcounter += 1;
    }
    //last row(do condition check prevent no item found in search)
    if (currentRowElement != null) {
        document.getElementById("item-container").appendChild(currentRowElement);
    }
}

//generate tag checkbox
function genTagCheckBox() {
    for (let tagProp in userConfig.tags) {
        let rowElement = document.createElement("div");
        let tagPropNameElement = document.createElement("label");
        tagPropNameElement.innerText = tagProp;
        rowElement.appendChild(tagPropNameElement);

        for (let singleTag of userConfig.tags[tagProp]) {
            let wholeTagElement = document.createElement("div");
            wholeTagElement.classList.add("pretty", "p-default");

            let tagCheckBoxElement = document.createElement("input")
            tagCheckBoxElement.setAttribute("type", "checkbox");
            tagCheckBoxElement.setAttribute("name", singleTag);
            tagCheckBoxElement.classList.add("tag")

            let labelWrapperElement = document.createElement("div");
            labelWrapperElement.classList.add("state", "p-success");

            let tagLabelElement = document.createElement("label");
            tagLabelElement.innerText = singleTag;
            tagLabelElement.setAttribute("style", "background-color:#FFE5B4")

            labelWrapperElement.appendChild(tagLabelElement);
            wholeTagElement.appendChild(tagCheckBoxElement);
            wholeTagElement.appendChild(labelWrapperElement);
            rowElement.appendChild(wholeTagElement);
        }
        document.getElementById("tag-container").appendChild(rowElement)
    }

    //recover tag selected before reload page
    if ("selectedTags" in sessionStorage) {
        let needCheckedTags = JSON.parse(sessionStorage.getItem("selectedTags"));
        for (let tag of needCheckedTags) {
            document.getElementsByName(tag)[0].checked = true;
        }
    }

}

//if there's search text then display
function checkSearchText() {
    if(sessionStorage.getItem("searchText") != "") {
        document.getElementById("current-search-text").innerText = "Search Text: " +sessionStorage.getItem("searchText");
    }
}

//check the sidebar search option is consistent(any, all, exclude)
// function checkSearchOptionStatus() {
//     if("tagSearchOption" in sessionStorage) {
//         document.getElementById(sessionStorage.getItem("tagSearchOption")).checked = "checked";
//     }
// }

//check the order(asc/desc) and change the text/image in correspond button
function checkOrderAsc() {
    if (sessionStorage.getItem("sortAsc") === "true") {
        document.getElementById("asc-desc-sort-btn").innerText = "Order: Asc";
    }
    else {
        document.getElementById("asc-desc-sort-btn").innerText = "Order: Desc";
    }
}

//dropdown menu for selecting sort property
function genSortPropMenu() {
    let currentSortProperty = sessionStorage.getItem("sortProperty");
    document.getElementById("selected-sortProp").innerText = "Sort By: " + currentSortProperty;

    for (let prop of userConfig.sortList) {
        if (prop != currentSortProperty) {
            let dropdownItem = document.createElement("a");
            dropdownItem.classList.add("dropdown-item");
            dropdownItem.setAttribute("href", "#");
            dropdownItem.innerText = prop;
            dropdownItem.addEventListener("click", () => { sortPropertyClickEventListener(prop) })
            document.getElementById("sortProp-dropdown-menu").appendChild(dropdownItem);
        }
    }
}

//TODO: also need to do in controller => use an array to store the name of customsetting and use for loop. index has number problem when delete middle element
//generate the customSetting Button
// function genCustomSearchButton() {
//     let customSettingArray = JSON.parse(localStorage.getItem("customSettingArray"));
//     for (let i = 0; i < customSettingArray.length; i++) {
//         let currentItemName = customSettingArray[i].settingName;

//         let customWrapper = document.createElement("li");
//         customWrapper.setAttribute("id", "custom-wrapper-" + String(i + 1))

//         //delete button
//         let customSearchDeleteBtn = document.createElement("button");
//         customSearchDeleteBtn.innerText = "X";
//         customSearchDeleteBtn.addEventListener("click", () => {
//             //will prompt confirmation window first
//             let deletOptions = {
//                 type: "warning",
//                 buttons: ["Yes", "No"],
//                 message: "Do you really want to delete " + currentItemName + " ?"
//             }
//             //return value is the index of selection
//             let response = dialog.showMessageBoxSync(deletOptions)
//             if (response == 0) {
//                 //remove object in custom setting array and set back the array to local storage
//                 let customSettingArray = JSON.parse(localStorage.getItem("customSettingArray"));
//                 for (let j = 0; j < customSettingArray.length; j++) {
//                     if (customSettingArray[j].settingName == currentItemName) {
//                         customSettingArray.splice(i, 1);
//                         break;
//                     }
//                 }
//                 localStorage.setItem("customSettingArray", JSON.stringify(customSettingArray));

//                 //remove animation
//                 $("#custom-wrapper-" + String(i + 1)).slideUp(400);
//                 //delete all children
//                 while (customWrapper.hasChildNodes()) {
//                     customWrapper.removeChild(customWrapper.lastChild);
//                 }
//                 customWrapper.remove();
//             }
//         })

//         let customSearchBtnElement = document.createElement("button");
//         customSearchBtnElement.innerText = currentItemName;
//         customSearchBtnElement.addEventListener("click", () => {
//             customSearchClickEventListener(customSettingArray[i]);
//         })
//         customWrapper.appendChild(customSearchDeleteBtn);
//         customWrapper.appendChild(customSearchBtnElement);
//         document.getElementById("custom-condition-panel").appendChild(customWrapper);
//         //}
//     }
// }

//generate pagelink
//in this project all page is present in 0-index base except for displaying text to user
function genPageLink() {
    let totalPage = getTotalPage();
    let currentPage = parseInt(window.sessionStorage.getItem("currentPage"));
    let pageStartIndex = 0;
    let pageEndIndex = totalPage;
    let buttonElement = null;
    let pageLinkContentElement = document.getElementById("pageLink");
    let buttonCollection = document.createElement("span");
    let etcSymbolElement = document.createElement("span");
    etcSymbolElement.innerText = "...";

    // [1] [...] [a1], [a2] ... [currentpage] ... [ak]  [...] [lastpage]
    //a1 to currentpage is the pageBtnRange
    let pageBtnRange = parseInt((maxPageBtn - 5) / 2);

    if (totalPage > maxPageBtn) {
        pageEndIndex = maxPageBtn - 1;
        //the case the current page is closer to the first page
        if (currentPage - 1 <= pageBtnRange) {
            pageEndIndex -= 1;
        }
        //the case the current page is closer to the last page and the case the current page is in the middle
        else {
            if (totalPage - currentPage - 1 <= pageBtnRange) {
                pageStartIndex = totalPage - (maxPageBtn - 2);
                pageEndIndex = totalPage;
            }
            else {
                pageStartIndex = currentPage - pageBtnRange;
                pageEndIndex = currentPage + pageBtnRange;
            }
            //generate first page button and [...] text
            buttonElement = document.createElement("button");
            buttonElement.addEventListener("click", () => { reloadWindowPageNum(0) });
            buttonElement.setAttribute("id", "pageBtn1");
            buttonElement.innerText = "1";
            buttonCollection.appendChild(buttonElement);
            buttonCollection.appendChild(etcSymbolElement.cloneNode(true));
        }
    }

    //add current page surrounding button
    for (let i = pageStartIndex; i <= pageEndIndex; i++) {
        buttonElement = document.createElement("button");
        buttonElement.addEventListener("click", () => { reloadWindowPageNum(i) });
        buttonElement.setAttribute("id", "pageBtn" + String(i));
        buttonElement.innerText = String(i + 1);
        if(i == currentPage) {
            buttonElement.style.color = "blue";
            //buttonElement.style.left = "50%";
            //buttonElement.style.position = "absolute";
        }
        buttonCollection.appendChild(buttonElement);
    }

    if (totalPage > maxPageBtn) {
        //the case the current page is closer to the first page and the case the current page is in the middle : add [...] [lastpage]
        if (totalPage - currentPage - 1 > pageBtnRange) {
            buttonElement = document.createElement("button");
            buttonElement.addEventListener("click", () => { reloadWindowPageNum(totalPage) });
            buttonElement.setAttribute("id", "pageBtn" + String(totalPage));
            buttonElement.innerText = String(totalPage + 1);
            buttonCollection.appendChild(etcSymbolElement.cloneNode(true));
            buttonCollection.appendChild(buttonElement);
        }
    }

    //wrapper of text input elements
    let pageTextWrapper = document.createElement("span");

    //add text input to change page
    let pageTextInputLabel = document.createElement("span");
    pageTextInputLabel.innerText = "Go Page: ";

    let pageTextInputErrorElement = document.createElement("span");
    pageTextInputErrorElement.innerText = "Not Valid Number";
    pageTextInputErrorElement.setAttribute("id", "page-valid-error-text")
    pageTextInputErrorElement.style.color = "red";
    pageTextInputErrorElement.style.opacity = 0.0;

    let pageTextInputElement = document.createElement("input");
    pageTextInputElement.setAttribute("type", "text");
    //fixed width
    pageTextInputElement.style.width = "50px";

    //page number validation
    pageTextInputElement.addEventListener("keyup", ({ key }) => {
        if (key === "Enter") {
            if (!isNaN(parseFloat(pageTextInputElement.value))) {
                if (parseInt(pageTextInputElement.value) < 1 || parseInt(pageTextInputElement.value) > totalPage + 1 || pageTextInputElement.value.includes(".")) {
                    console.log("wrong input")
                    $('#page-valid-error-text').fadeTo("slow", 1.0);
                    $('#page-valid-error-text').fadeTo(1200, 0.0);
                }
                else {
                    reloadWindowPageNum(parseInt(pageTextInputElement.value) - 1);
                }
            }
            else {
                console.log("wrong input")
                $('#page-valid-error-text').fadeTo("normal", 1.0);
                $('#page-valid-error-text').fadeTo("normal", 0.0);
            }
        }
    })
    pageTextWrapper.appendChild(pageTextInputLabel);
    pageTextWrapper.appendChild(pageTextInputElement);
    pageTextWrapper.appendChild(pageTextInputErrorElement);

    //dummy node for alignment need
    let dummyPageTextWrapper = document.createElement("span");
    dummyPageTextWrapper.style.visibility = "hidden";
    
    let dummyTextErrorMsg = pageTextInputErrorElement.cloneNode(true);
    dummyTextErrorMsg.setAttribute("id", "dummyErrorPagetext")
    dummyPageTextWrapper.appendChild(pageTextInputLabel.cloneNode(true));
    dummyPageTextWrapper.appendChild(pageTextInputElement.cloneNode(true));
    dummyPageTextWrapper.appendChild(dummyTextErrorMsg);

    pageLinkContentElement.appendChild(dummyPageTextWrapper);
    pageLinkContentElement.appendChild(buttonCollection);
    pageLinkContentElement.appendChild(pageTextWrapper);
}



